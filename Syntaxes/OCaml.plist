{
  // This syntax file is *mostly* correct per the 3.08.3 release of the OCaml
  //  language specification.  Some things that I know are missing are proper
  // recognition of infix symbol functions, but I'm sure there's a few other
  // things that could be added e.g. the Pervasives and Standard Library function
  // names (though this might not be desirable...)
  //
  // Also note that I plan on adding extra support for OCamlyacc/lex/p4 in the future.
  //
  // William D. Neumann
  
	name = "OCaml Source";
	scopeName = "source.ocaml";
	uuid = "F816FA69-6EE8-11D9-BF2D-000D93589AF6";
	fileTypes = (ml, mli, mll, mly);
	foldingStartMarker = "\\b(struct|sig|object)\\b|\\(\\*\\*";
	foldingStopMarker = "\\bend\\b|\\*\\*\\)";
	increaseIndentPattern = "^.*(\\([^)\"']*|begin)$|\\blet\\s+[a-z][a-zA-Z0-9_']*.*(?!in$)|match\\s+.*\\s+with\\s*$|\\b(class|object|struct|sig)\\b";
	smartTypingPairs = (
	   ( "(", ")" ), ( "[", "]" ), ( "{", "}" ),
	   ( "\"", "\"" ), ( "'", "'" )
	);
	highlightPairs = (
	   ( "(", ")" ), ( "[", "]" ), ( "{", "}" )
	);
	foregroundColor = "#e0e0e0";
	backgroundColor = "#404040";
	patterns = (
	{ name = "declaration.function"; match = "\\b(let|let\\s+rec)?\\s+([a-z][a-zA-Z0-9'_']*)\\s+([a-z][a-zA-Z0-9'_']*)+"; captures = {2 = { name = "entity.name.function"; }; };
	},
  	{ name = "comment.block.ocaml"; begin = "\\(\\*"; end = "\\*\\)"; swallow = "(\\(\\*.*\\*\\))+?"; fontStyle = ( italic ); foregroundColor = "#709070"; },

  	{ name = "comment.block.ocamlyacc"; begin = "/\\*"; end = "\\*/"; swallow = "(/\\*.*\\*/)+?"; fontStyle = ( italic ); foregroundColor = "#709070"; },

		{ name = "keyword.language.ocaml"; match = "\\b(and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|false|for|fun|function|functor|if|in|include|inherit|initializer|land|lazy|let|lor|lsl|lsr|lxor|match|method|mod|module|mutable|new|object|of|open|or|private|rec|sig|struct|then|to|true|try|type|val|virtual|when|while|with)\\b"; fontStyle = ( bold ); foregroundColor = "#ffffa0"; },

		{ name = "keyword.module"; match = "\\b([A-Z][a-zA-Z0-9_]*\\.)+"; fontStyle = ( bold ); foregroundColor = "#ff8000"; },

		{ name = "keyword.module.open"; match = "open\\s+([A-Z][a-zA-Z0-9_]*(\\.[A-Z][a-zA-Z0-9_]*)*)"; "fontStyle[1]" = ( bold ); "foregroundColor[1]" = "#ff8000"; },

		{ name = "keyword.type.storage"; match = "\\b(int|char|float|string|list|array|mutable|ref|bool|unit|exn|option|int32|int64|nativeint|format4|lazy_t|type)\\b"; foregroundColor = "#6080ff"; },

		{ name = "keyword.type.variant"; match = "\\b[A-Z][a-zA-Z0-9_]*\\b"; fontStyle = ( bold ); foregroundColor = "#4080a0"; },

		{ name = "keyword.type.variant.polymorphic"; match = "\\b`[A-Z][a-zA-Z0-9_]*\\b"; fontStyle = ( bold ); foregroundColor = "#4080a0"; },

		{ name = "keyword.directive"; match = "^[ \\t]*#[a-zA-Z]+"; fontStyle = ( bold ); },

		{ name = "keyword.directive.line-number"; match = "^[ \\t]*#[0-9]*"; fontStyle = ( bold ); },

		{ name = "constant.numeric.integer"; match = "\\b(-?(([0-9][0-9_]*)|(0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)))\\b"; foregroundColor = "#40c0ff"; },

		{ name = "constant.numeric.floating-point"; match = "\\b-?[0-9][0-9_]*((\\.([0-9][0-9_]*([eE][+-]??[0-9][0-9_]*)?)?)|([eE][+-]??[0-9][0-9_]*))"; foregroundColor = "#40c0ff"; },

		{ name = "constant.character"; match = "'(\\\\x[a-fA-F0-9][a-fA-F0-9]|\\\\\\d\\d\\d|.|\\\\[bnrt'\"]|\\\\\\\\)'"; foregroundColor = "#ff8080"; },

		{ name = "string.double-quoted"; begin = "(?=[^\\\\])(\")"; end = "\""; swallow = "\\\\."; foregroundColor = "#c03030"; },

		{ name = "keyword.operator.symbol"; match = "\\b_|!=|[#|,)(\\]]|\\.{1,2}?|:[:=>]??|;{1,2}?|>[\\]}]|\\[[<>|]?|\\{<?|\\|]"; foregroundColor = "#ffffa0"; },
		
		{ name = "keyword.operator.symbol.infix.floating-point"; match = "[*+/-]\\."; foregroundColor = "#ffffa0"; },

		{ name = "keyword.operator.symbol.prefix.floating-point"; match = "~-\\."; foregroundColor = "#ffffa0"; },
		
		{ name = "keyword.operator.symbol.infix"; match = "[=<>@^|&+\\-*/$%][!$%&*+./:<=>?@^|~-]*"; foregroundColor = "#ffffa0"; },

		{ name = "keyword.operator.symbol.prefix"; match = "[!?~][!$%&*+./:<=>?@^|~-]*"; foregroundColor = "#ffffa0"; }
	);
}
